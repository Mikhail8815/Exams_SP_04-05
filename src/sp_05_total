                                                –ó–∞–¥–∞—á–∞ ‚Ññ1

–í–æ–ø—Ä–æ—Å:

–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ Name –∏–ª–∏ Age –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ –∫–∞–∫ –∏–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.

–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ Age –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É, –∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ Name –ø–æ –∏–º–µ–Ω–∏

–û–¥–Ω–∞–∫–æ –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –∫–æ–¥ getUsers –Ω–∞–ø–∏—Å–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è.

–ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ getUsers —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞ –≤–µ—Ä–Ω–æ

‚ùó–¢–∏–ø–∏–∑–∞—Ü–∏—é —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

‚ùó–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

–ü–µ—Ä–≤—ã–º: sortDirection, –≤—Ç–æ—Ä—ã–º sortBy.

–≠—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö –∫–æ–¥–∞, –µ—Å–ª–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∞—Ç—å —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞

getUsers: builder.query<{ sortDirection: any; sortBy: any >({

query: () => {

return {

url: `users`,

}

},

}),



import { createRoot } from "react-dom/client"
import React, { useState } from "react"
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { configureStore } from "@reduxjs/toolkit"
import { Provider } from "react-redux"
// Styles
const table: React.CSSProperties = {
  borderCollapse: "collapse",
  width: "100%",
  tableLayout: "fixed",
}
const th: React.CSSProperties = {
  padding: "10px",
  border: "1px solid black",
  background: "lightgray",
  cursor: "pointer",
}
const td: React.CSSProperties = {
  padding: "10px",
  border: "1px solid black",
}
// Api
type User = {
  id: number
  name: string
  age: number
}
type UserResponse = {
  totalCount: number
  items: User[]
}
type SortDirection = "asc" | "desc" | null
type SortBy = "name" | "age" | null
const api = createApi({
  reducerPath: "api",
  baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
  endpoints: (builder) => ({
    getUsers: builder.query({
      query: () => {
        return {
          url: `users`,
        }
      },
    }),
  }),
})
const { useGetUsersQuery } = api
// App
export const App = () => {
  const [sortDirection, setSortDirection] = useState<SortDirection>("asc")
  const [sortBy, setSortBy] = useState<SortBy>("age")
  const { data } = useGetUsersQuery({ sortDirection, sortBy })
  const sortHandler = (name: "name" | "age") => {
    const direction = sortDirection === "asc" ? "desc" : "asc"
    setSortDirection(direction)
    setSortBy(name)
  }
  return (
    <>
      <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
      <table style={table}>
        <thead>
          <tr>
            <th style={th} onClick={() => sortHandler("name")}>
              Name
            </th>
            <th style={th} onClick={() => sortHandler("age")}>
              Age
            </th>
          </tr>
        </thead>
        <tbody>
          {data?.items.map((user) => (
            <tr key={user.id}>
              <td style={td}>{user.name}</td>
              <td style={td}>{user.age}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </>
  )
}
// store.ts
const store = configureStore({
  reducer: { [api.reducerPath]: api.reducer },
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
})
createRoot(document.getElementById("root")!).render(
  <Provider store={store}>
    <App />
  </Provider>,
)





                                                –ó–∞–¥–∞—á–∞ ‚Ññ2






                                                –ó–∞–¥–∞—á–∞ ‚Ññ3







                                                –ó–∞–¥–∞—á–∞ ‚Ññ4








                                                –ó–∞–¥–∞—á–∞ ‚Ññ5








                                                –ó–∞–¥–∞—á–∞ ‚Ññ6









                                                –ó–∞–¥–∞—á–∞ ‚Ññ7










                                                –ó–∞–¥–∞—á–∞ ‚Ññ8

